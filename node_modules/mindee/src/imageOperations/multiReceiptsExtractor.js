"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractReceipts = void 0;
const pdf_lib_1 = require("pdf-lib");
const errors_1 = require("../errors");
const geometry_1 = require("../geometry");
const extractedMultiReceiptImage_1 = require("./extractedMultiReceiptImage");
async function addPage(pdfPage, boundingBox, pageId, receiptId) {
    const { width, height } = pdfPage.getSize();
    const receiptPdf = await pdf_lib_1.PDFDocument.create();
    const newWidth = width * ((0, geometry_1.getMinMaxX)(boundingBox).max - (0, geometry_1.getMinMaxX)(boundingBox).min);
    const newHeight = height * ((0, geometry_1.getMinMaxY)(boundingBox).max - (0, geometry_1.getMinMaxY)(boundingBox).min);
    const croppedReceipt = await receiptPdf.embedPage(pdfPage, {
        left: (0, geometry_1.getMinMaxX)(boundingBox).min * width,
        right: (0, geometry_1.getMinMaxX)(boundingBox).max * width,
        top: height - ((0, geometry_1.getMinMaxY)(boundingBox).min * height),
        bottom: height - ((0, geometry_1.getMinMaxY)(boundingBox).max * height),
    });
    const receiptPage = receiptPdf.addPage([newWidth, newHeight]);
    receiptPage.drawPage(croppedReceipt, {
        width: newWidth,
        height: newHeight,
    });
    const receiptBytes = await receiptPdf.save();
    return new extractedMultiReceiptImage_1.ExtractedMultiReceiptImage(receiptBytes, pageId, receiptId);
}
async function loadPdfDoc(inputFile) {
    let pdfDoc;
    if (!["image/jpeg", "image/jpg", "image/png", "application/pdf"].includes(inputFile.mimeType)) {
        throw new errors_1.MindeeMimeTypeError(`Unsupported file type "${inputFile.mimeType}" Currently supported types are .png, .jpg and .pdf`);
    }
    else if (inputFile.isPdf()) {
        pdfDoc = await pdf_lib_1.PDFDocument.load(inputFile.fileObject);
    }
    else {
        pdfDoc = await pdf_lib_1.PDFDocument.create();
        let image;
        if (inputFile.mimeType === "image/png") {
            image = await pdfDoc.embedPng(inputFile.fileObject);
        }
        else {
            image = await pdfDoc.embedJpg(inputFile.fileObject);
        }
        const imageDims = image.scale(1);
        const pageImage = pdfDoc.addPage([imageDims.width, imageDims.height]);
        pageImage.drawImage(image);
    }
    return pdfDoc;
}
/**
 * Extracts individual receipts from multi-receipts documents.
 *
 * @param inputFile File to extract sub-receipts from.
 * @param inference Results of the inference.
 * @returns Individual extracted receipts as an array of ExtractedMultiReceiptsImage.
 */
async function extractReceipts(inputFile, inference) {
    const images = [];
    if (!inference.prediction.receipts) {
        throw new errors_1.MindeeError("No possible receipts candidates found for MultiReceipts extraction.");
    }
    const pdfDoc = await loadPdfDoc(inputFile);
    for (let pageId = 0; pageId < pdfDoc.getPageCount(); pageId++) {
        const [page] = await pdfDoc.copyPages(pdfDoc, [pageId]);
        for (let receiptId = 0; receiptId < inference.pages[pageId].prediction.receipts.length; receiptId++) {
            const receipt = inference.pages[pageId].prediction.receipts[receiptId];
            images.push(await addPage(page, receipt.boundingBox, pageId, receiptId));
        }
    }
    return images;
}
exports.extractReceipts = extractReceipts;
